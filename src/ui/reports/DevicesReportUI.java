/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.reports;

import base.AdvancedFrame;
import data.pojo.Department;
import data.pojo.DeviceUpload;
import data.pojo.Model;
import data.pojo.responses.ReportResponse;
import data.pojo.responses.ReportRow;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.event.MouseEvent;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellEditor;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.joda.time.DateTime;
import other.FilePathsConstants;
import repository.DepartmentsRepository;
import repository.DevicesRepository;
import repository.ModelsRepository;
import ui.about_developer.AboutDeveloperUI;
import ui.add_new_device.AddNewDevice;
import ui.brands_uis.BrandsUI;
import ui.departments.DepartmentsUI;
import ui.devices.DevicesUI;
import ui.import_devices.ImportDevicesUI;
import ui.models_ui.ModelsUI;
import ui.transactions_ui.TransactionsUI;
import ui.types_uis.TypesUI;
import uis_items.CustomProgressDialog;
import utils.ExcelReader;
import utils.MessageBox;

/**
 *
 * @author pc
 */
public class DevicesReportUI extends AdvancedFrame {

//    private Thread workThread = null;
//    private Runnable workThreadRunnable = null;
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

    private ReportResponse devicesReport;
    private final ArrayList<Model> allModels = new ArrayList<>();
    private final ArrayList<Department> allDepartments = new ArrayList<>();
    private ReportController reportController = new ReportController(
            DevicesRepository.getInstance(
                    ModelsRepository.getInstance(),
                    DepartmentsRepository.getInstance()
            ),
            ModelsRepository.getInstance()
    );

    private static DevicesReportUI instance;

    public static DevicesReportUI getInstance() {

        synchronized (DevicesReportUI.class) {
            if (instance == null) {
                synchronized (DevicesReportUI.class) {
                    instance = new DevicesReportUI();
                }
            }

        }

        return instance;
    }

    /**
     * Creates new form DevicesReport
     */
    private DevicesReportUI() {
        initComponents();
        setExtendedState(getExtendedState() | JFrame.MAXIMIZED_BOTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btnFilter = new com.k33ptoo.components.KButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        reportTable = new base.AdvancedTable();
        jPanel1 = new javax.swing.JPanel();
        jToggleButton1 = new javax.swing.JToggleButton();
        btnExportReportAsExcel = new javax.swing.JButton();
        btnPrintTable = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblResponseDepsCount = new javax.swing.JLabel();
        lblResponseModelCount = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        modelsPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        modelsList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        checkBoxAllModels = new javax.swing.JCheckBox();
        depsPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        depsList = new javax.swing.JList<>();
        checkBoxAllDeps = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu8 = new javax.swing.JMenu();
        itemImportDevicesData = new javax.swing.JMenuItem();
        itemDownloadDevicesData = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        menuItemAddNewDepartment = new javax.swing.JMenuItem();
        menuItemShowAllDepartments = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuItemAddNewDevice = new javax.swing.JMenuItem();
        menuItemShowAllDevices = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        itemAddNewBrand = new javax.swing.JMenuItem();
        itemShowAllBrands = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        itemShowTypes = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        itemAddModel = new javax.swing.JMenuItem();
        itemShowModels = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        itemRefreshFormData = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenu();
        itemShowLogData = new javax.swing.JMenuItem();
        menuAboutUs = new javax.swing.JMenu();
        itemAboutUs = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("تمام توزيع الأجهزة");
        setName("تمام توزيع الأجهزة"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        layout.columnWeights = new double[] {1.1};
        layout.rowWeights = new double[] {1.1};
        getContentPane().setLayout(layout);

        btnFilter.setText("بحث");
        btnFilter.setkAllowTab(true);
        btnFilter.setkBorderRadius(20);
        btnFilter.setkEndColor(new java.awt.Color(0, 102, 153));
        btnFilter.setkStartColor(new java.awt.Color(102, 153, 255));
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.ipady = 20;
        getContentPane().add(btnFilter, gridBagConstraints);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(500, 400));

        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        reportTable.setAutoscrolls(false);
        reportTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        reportTable.setMinimumSize(new java.awt.Dimension(500, 500));
        reportTable.setPreferredScrollableViewportSize(new java.awt.Dimension(600, 500));
        reportTable.getTableHeader().setReorderingAllowed(false);
        reportTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                reportTableMouseEntered(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                reportTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(reportTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 361;
        gridBagConstraints.ipady = 376;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel1Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel1.setLayout(jPanel1Layout);

        jToggleButton1.setText("تمييز بالألوان");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 5;
        jPanel1.add(jToggleButton1, gridBagConstraints);

        btnExportReportAsExcel.setBackground(new java.awt.Color(51, 153, 0));
        btnExportReportAsExcel.setForeground(new java.awt.Color(255, 255, 255));
        btnExportReportAsExcel.setText("حفظ في ملف EXcel");
        btnExportReportAsExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportReportAsExcelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 5;
        jPanel1.add(btnExportReportAsExcel, gridBagConstraints);

        btnPrintTable.setText("طباعة الجدول");
        btnPrintTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintTableActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 5;
        jPanel1.add(btnPrintTable, gridBagConstraints);

        jButton1.setText("تمييز الأرقام");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 5;
        jPanel1.add(jButton1, gridBagConstraints);
        //jButton1.setVisible(false);

        jLabel4.setForeground(new java.awt.Color(0, 102, 255));
        jLabel4.setText("عدد الموديلات");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 20;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel3.setForeground(new java.awt.Color(0, 102, 255));
        jLabel3.setText("عدد الأفرع");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 20;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(jLabel3, gridBagConstraints);

        lblResponseDepsCount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblResponseDepsCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblResponseDepsCount.setText("--");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(lblResponseDepsCount, gridBagConstraints);

        lblResponseModelCount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblResponseModelCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblResponseModelCount.setText("--");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel1.add(lblResponseModelCount, gridBagConstraints);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setPreferredSize(new java.awt.Dimension(5, 5));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 14;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 6;
        jPanel1.add(jSeparator3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        getContentPane().add(jPanel1, gridBagConstraints);

        modelsPanel.setLayout(new java.awt.GridBagLayout());

        modelsList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        jScrollPane2.setViewportView(modelsList);
        modelsList.setEnabled(false);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 120;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        modelsPanel.add(jScrollPane2, gridBagConstraints);

        jLabel1.setText("الموديلات ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        modelsPanel.add(jLabel1, gridBagConstraints);

        checkBoxAllModels.setSelected(true);
        checkBoxAllModels.setText("كل الموديلات");
        checkBoxAllModels.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxAllModelsItemStateChanged(evt);
            }
        });
        checkBoxAllModels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAllModelsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        modelsPanel.add(checkBoxAllModels, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(modelsPanel, gridBagConstraints);

        depsPanel.setLayout(new java.awt.GridBagLayout());

        depsList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        jScrollPane3.setViewportView(depsList);
        depsList.setEnabled(false);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 120;
        depsPanel.add(jScrollPane3, gridBagConstraints);

        checkBoxAllDeps.setSelected(true);
        checkBoxAllDeps.setText("كل الأفرع");
        checkBoxAllDeps.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxAllDepsItemStateChanged(evt);
            }
        });
        checkBoxAllDeps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxAllDepsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(1, 6, 0, 6);
        depsPanel.add(checkBoxAllDeps, gridBagConstraints);

        jLabel2.setText("الأفرع");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 0);
        depsPanel.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(depsPanel, gridBagConstraints);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("تطبيق مراقبة العهدة - تنفيذ : أحمد محمد حسان - 01146906776 - ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jLabel6, gridBagConstraints);

        jMenuBar1.setForeground(new java.awt.Color(0, 102, 255));
        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jMenu8.setForeground(new java.awt.Color(0, 102, 255));
        jMenu8.setText("ملف");
        jMenu8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu8.setDelay(250);
        jMenu8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        itemImportDevicesData.setText("استيراد بيانات الأجهزة");
        itemImportDevicesData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemImportDevicesDataActionPerformed(evt);
            }
        });
        jMenu8.add(itemImportDevicesData);

        itemDownloadDevicesData.setText("تحميل بيانات الأجهزة");
        itemDownloadDevicesData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDownloadDevicesDataActionPerformed(evt);
            }
        });
        jMenu8.add(itemDownloadDevicesData);

        jMenuBar1.add(jMenu8);

        jMenu1.setForeground(new java.awt.Color(0, 102, 255));
        jMenu1.setText("الأفرع / الأقسام");
        jMenu1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu1.setDelay(250);
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        menuItemAddNewDepartment.setText("إضافة فرع");
        menuItemAddNewDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAddNewDepartmentActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemAddNewDepartment);

        menuItemShowAllDepartments.setText("عرض كل الأفرع");
        menuItemShowAllDepartments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemShowAllDepartmentsActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemShowAllDepartments);

        jMenuBar1.add(jMenu1);

        jMenu2.setForeground(new java.awt.Color(0, 102, 255));
        jMenu2.setText("الأجهزة");
        jMenu2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu2.setDelay(250);
        jMenu2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        menuItemAddNewDevice.setText("إضافة جهاز");
        menuItemAddNewDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAddNewDeviceActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemAddNewDevice);

        menuItemShowAllDevices.setText("عرض كل الأحهزة");
        menuItemShowAllDevices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemShowAllDevicesActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemShowAllDevices);

        jMenuBar1.add(jMenu2);

        jMenu3.setForeground(new java.awt.Color(0, 102, 255));
        jMenu3.setText("تنقلات الأجهزة");
        jMenu3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu3.setDelay(250);
        jMenu3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jMenuItem5.setText("عرض كل العمليات");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        jMenu5.setForeground(new java.awt.Color(0, 102, 255));
        jMenu5.setText("الشركات");
        jMenu5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu5.setDelay(250);
        jMenu5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        itemAddNewBrand.setText("إضافة");
        itemAddNewBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAddNewBrandActionPerformed(evt);
            }
        });
        jMenu5.add(itemAddNewBrand);

        itemShowAllBrands.setText("عرض كل شركات الأجهزة");
        itemShowAllBrands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemShowAllBrandsActionPerformed(evt);
            }
        });
        jMenu5.add(itemShowAllBrands);

        jMenuBar1.add(jMenu5);

        jMenu7.setForeground(new java.awt.Color(0, 102, 255));
        jMenu7.setText("أنواع الأجهزة");
        jMenu7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu7.setDelay(250);
        jMenu7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        itemShowTypes.setText("عرض أنواع الأجهزة");
        itemShowTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemShowTypesActionPerformed(evt);
            }
        });
        jMenu7.add(itemShowTypes);

        jMenuBar1.add(jMenu7);

        jMenu4.setForeground(new java.awt.Color(0, 102, 255));
        jMenu4.setText("الموديلات");
        jMenu4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu4.setDelay(250);
        jMenu4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        itemAddModel.setText("إضافة موديل");
        itemAddModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAddModelActionPerformed(evt);
            }
        });
        jMenu4.add(itemAddModel);

        itemShowModels.setText("عرض كل الموديلات");
        itemShowModels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemShowModelsActionPerformed(evt);
            }
        });
        jMenu4.add(itemShowModels);

        jMenuBar1.add(jMenu4);

        jMenu6.setForeground(new java.awt.Color(0, 102, 255));
        jMenu6.setText("الصفحة الحالية");
        jMenu6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu6.setDelay(250);
        jMenu6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        itemRefreshFormData.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        itemRefreshFormData.setText("Refresh");
        itemRefreshFormData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRefreshFormDataActionPerformed(evt);
            }
        });
        jMenu6.add(itemRefreshFormData);

        jMenuBar1.add(jMenu6);

        jMenu10.setForeground(new java.awt.Color(0, 102, 255));
        jMenu10.setText("السجل");
        jMenu10.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenu10.setDelay(250);
        jMenu10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        itemShowLogData.setText("عرض");
        itemShowLogData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemShowLogDataActionPerformed(evt);
            }
        });
        jMenu10.add(itemShowLogData);

        jMenuBar1.add(jMenu10);
        jMenu10.setVisible(false);

        menuAboutUs.setForeground(new java.awt.Color(0, 102, 255));
        menuAboutUs.setText("About Us");
        menuAboutUs.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        menuAboutUs.setDelay(250);
        menuAboutUs.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        itemAboutUs.setText("About Us");
        itemAboutUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAboutUsActionPerformed(evt);
            }
        });
        menuAboutUs.add(itemAboutUs);

        jMenuBar1.add(menuAboutUs);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        try {
            String endDateString = "2023-05-31";
//            String endDateString = "2022-11-16";

            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
            Date endDate = formatter.parse(endDateString);

            DateTime endArmyPeriod = new DateTime(endDate);

            menuAboutUs.setVisible(DateTime.now().isAfter(endArmyPeriod));

            if (reportTable != null) {
                JTableHeader tableHeader = reportTable.getTableHeader();
                tableHeader.setBackground(Color.GRAY.brighter());
                tableHeader.getFontMetrics(tableHeader.getFont()).stringWidth("60");
            }

//        String toString = .toString();
            allModels.clear();
            fetchModels();
            fetchDepartments();
            fillModelsList(allModels);
            fillDepartmentsListView(allDepartments);

//        getTableData(new int[]{}, new int[]{});
            btnFilter.doClick(); // to get all data
        } catch (ParseException ex) {
            Logger.getLogger(DevicesReportUI.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_formWindowOpened

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed

        CustomProgressDialog.showProgressDialog(this, false, "جار تحميل التوزيع");
        btnFilter.setVisible(false);
        int[] selectedDepsIDs;
        int[] selectedModelsIDs;

        if (checkBoxAllModels.isSelected()) {
            selectedModelsIDs = new int[0];
        } else {
            selectedModelsIDs = getSelectedModelsIDs(modelsList.getSelectedIndices());
        }
        if (checkBoxAllDeps.isSelected()) {
            selectedDepsIDs = new int[0];
        } else {
            selectedDepsIDs = getSelectedDepsIDs(depsList.getSelectedIndices());
        }

//            MessageBox.showErrorMessage("Selected Ind = "+Arrays.toString(selectedIndices)+"\nModelsIds = "+Arrays.toString(modelsIds));
        System.out.println("deps = " + Arrays.toString(selectedDepsIDs) + " Models = " + Arrays.toString(selectedModelsIDs));

        jToggleButton1.setSelected(false);
        removeResponsesCounts();
        getTableData(selectedDepsIDs, selectedModelsIDs);
        btnFilter.setVisible(true);


    }//GEN-LAST:event_btnFilterActionPerformed

    private void checkBoxAllModelsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxAllModelsItemStateChanged

        modelsList.setEnabled(!checkBoxAllModels.isSelected());

        if (checkBoxAllModels.isSelected()) {
            modelsList.clearSelection();
        }
    }//GEN-LAST:event_checkBoxAllModelsItemStateChanged

    private void checkBoxAllDepsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxAllDepsItemStateChanged

        depsList.setEnabled(!checkBoxAllDeps.isSelected());

        if (checkBoxAllDeps.isSelected()) {
            depsList.clearSelection();
        }

    }//GEN-LAST:event_checkBoxAllDepsItemStateChanged

    private void checkBoxAllModelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAllModelsActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_checkBoxAllModelsActionPerformed

    private void menuItemShowAllDevicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemShowAllDevicesActionPerformed
        startNewFrameWithOldFrame(DevicesUI.getInstance());

    }//GEN-LAST:event_menuItemShowAllDevicesActionPerformed

    private void btnExportReportAsExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportReportAsExcelActionPerformed

        if (devicesReport == null) {
            MessageBox.showErrorMessage("غير قادر علي انشاء الملف");
        } else {
            try {
                String fileName = new FilePathsConstants().getDevicesReportPath();
                exportToExcel(devicesReport, fileName);

                int option = JOptionPane.showConfirmDialog(this, "تم عمل الملف\nهل تريد فتحه الآن", "فتح الملف ؟", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    openExcelFile(fileName);
                }

            } catch (Exception ex) {
                Logger.getLogger(DevicesReportUI.class.getName()).log(Level.SEVERE, null, ex);
                MessageBox.showErrorMessage(ex.getMessage());
            }

        }
    }//GEN-LAST:event_btnExportReportAsExcelActionPerformed

    private void menuItemShowAllDepartmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemShowAllDepartmentsActionPerformed
        menuItemAddNewDepartmentActionPerformed(evt);
    }//GEN-LAST:event_menuItemShowAllDepartmentsActionPerformed

    private void menuItemAddNewDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAddNewDepartmentActionPerformed
        startNewFrameWithOldFrame(DepartmentsUI.getInstance());
    }//GEN-LAST:event_menuItemAddNewDepartmentActionPerformed

    private void itemShowAllBrandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemShowAllBrandsActionPerformed
        startNewFrameWithOldFrame(BrandsUI.getInstance());
    }//GEN-LAST:event_itemShowAllBrandsActionPerformed

    private void itemAddNewBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAddNewBrandActionPerformed
        itemShowAllBrandsActionPerformed(evt);
    }//GEN-LAST:event_itemAddNewBrandActionPerformed

    private void itemRefreshFormDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRefreshFormDataActionPerformed
        formWindowOpened(null);
    }//GEN-LAST:event_itemRefreshFormDataActionPerformed

    private void itemShowModelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemShowModelsActionPerformed
        startNewFrameWithOldFrame(ModelsUI.getInstance());
    }//GEN-LAST:event_itemShowModelsActionPerformed

    private void itemAddModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAddModelActionPerformed
        itemShowModelsActionPerformed(evt);
    }//GEN-LAST:event_itemAddModelActionPerformed

    private void itemShowTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemShowTypesActionPerformed
        startNewFrameWithOldFrame(TypesUI.getInstance());
    }//GEN-LAST:event_itemShowTypesActionPerformed

    private void menuItemAddNewDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAddNewDeviceActionPerformed
        startNewFrameWithOldFrame(AddNewDevice.getInstance());
    }//GEN-LAST:event_menuItemAddNewDeviceActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
//        destroyInstance();
    }//GEN-LAST:event_formWindowClosed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        startNewFrameWithOldFrame(TransactionsUI.getInstance(0));
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void reportTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportTableMouseClicked
        int clickCount = evt.getClickCount();

        if (evt.getButton() == MouseEvent.BUTTON1) {
            if (clickCount == 1) {
                checkAndColorTheTable();
            } else if (clickCount == 2) {
                int rowIndex = reportTable.getSelectedRow();
                if (rowIndex < devicesReport.getTableRows().size() - 1) {
                    ReportRow row = devicesReport.getTableRows().get(rowIndex);
//                    MessageBox.showMessage(row.getDepartmentName());
                    //TODO: Will get dep id then open devices with selected department
//                    DevicesUI.getInstance(row.getDepartmentName()).setVisible(true);
                    new DevicesUI(row.getDepartmentName(), -1, -1).setVisible(true);

                }

            }

        }
    }//GEN-LAST:event_reportTableMouseClicked

    private void itemImportDevicesDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemImportDevicesDataActionPerformed
        JFileChooser fileChooser = new JFileChooser();
//        fileChooser.
//        fileChooser.setFileFilter(new FileNameExtensionFilter("Excel", "xlsx","xls"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Excel", "xlsx"));
//        fileChooser.setFileFilter(new FileNameExtensionFilter("ملف نصي", "txt"));
//        fileChooser.setCurrentDirectory(new File("C:\\Users\\pc\\Desktop"));
        fileChooser.setApproveButtonText("استيراد");
        fileChooser.setMultiSelectionEnabled(false);
        int showOpenDialog = fileChooser.showOpenDialog(this);
        File selectedFile = fileChooser.getSelectedFile();

        if (selectedFile != null) {

            System.out.println("Ciurrent => " + Thread.currentThread().getName());
            scheduler.execute(() -> {
                try {
                    CustomProgressDialog.showProgressDialog(this, false, "جار قراءة الملف");
                    System.out.println("Selected " + selectedFile);
                    System.out.println("Open " + showOpenDialog);
                    if (isExcelFile(selectedFile)) {
//                    ExcelReader.read(selectedFile);
//                    ExcelReader.readNewExcel(selectedFile);
                        ArrayList<DeviceUpload> devicesList = ExcelReader.readNewExcelAsArray(selectedFile);
                        CustomProgressDialog.hideProgressDialog();
                        startNewFrameWithOldFrame(new ImportDevicesUI(devicesList));

//                        System.out.println("Current Now is => " + threadName);
//                    System.out.println("Size is "+devicesList.size());
                    } else {
                        try {
                            readTextFile(selectedFile);
                        } catch (Exception ex) {
                            Logger.getLogger(DevicesReportUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                } catch (Exception ex) {
                    Logger.getLogger(DevicesReportUI.class.getName()).log(Level.SEVERE, null, ex);
                    MessageBox.showErrorMessage("Error \n" + ex.getMessage());
                }
            });
        }


    }//GEN-LAST:event_itemImportDevicesDataActionPerformed

    private void checkBoxAllDepsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxAllDepsActionPerformed
        depsList.setSelectedIndex(-1);
    }//GEN-LAST:event_checkBoxAllDepsActionPerformed

    private void btnPrintTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintTableActionPerformed
        try {
            if (reportTable.getModel().getRowCount() == 0) {
                MessageBox.showErrorMessage("لا توجد أجهزة لطباعة الجدول");
                return;
            }

//            boolean isPrinted = reportTable.print(PrintMode.FIT_WIDTH,new MessageFormat("توزيع أجهزة الكلية"),null,true,null,false, null);
            boolean isPrinted = reportTable.print();
//            boolean isPrinted = reportTable.print(PrintMode.FIT_WIDTH);
//            System.out.println("isPrinted ? "+isPrinted);
            if (!isPrinted) {
                throw new PrinterException("");
            }
        } catch (PrinterException ex) {
            Logger.getLogger(DevicesReportUI.class.getName()).log(Level.SEVERE, null, ex);
            MessageBox.showErrorMessage("غير قادر علي الطباعة\n" + ex.getMessage());
        }
    }//GEN-LAST:event_btnPrintTableActionPerformed

    private void itemDownloadDevicesDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDownloadDevicesDataActionPerformed
        scheduler.execute(() -> {
            try {
//            String fileName = "تمام توزيعة أجهزة النظم.xlsx";
            CustomProgressDialog.showProgressDialog(this, "جار تحميل بيانات الأجهزة");
                String fileName = new FilePathsConstants().getDevicesExportPath();
                reportController.exportDesvicesSheet(fileName);
                
            } catch (Exception ex) {
                Logger.getLogger(DevicesReportUI.class.getName()).log(Level.SEVERE, null, ex);
                MessageBox.showErrorMessage(ex.getMessage());
            }
        });


    }//GEN-LAST:event_itemDownloadDevicesDataActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int colsCount = reportTable.getColumnCount();

        for (int colIndex = 0; colIndex < colsCount - 1; colIndex++) {
            changeTable(reportTable, colIndex);
        }

        changeTable(reportTable, colsCount - 1);

        reportTable.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
        reportTable.setRowSelectionAllowed(true);
        reportTable.repaint();
//        reportTable.setDefaultEditor(Object.class, new CustomTableCellEditor());
//        reportTable.setDefaultRenderer(Object.class, new CustomTableRenderer(false));
//        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();
//        for (int rowIndex = 0; rowIndex < rowsCount; rowIndex++) {
//            for (int colIndex = 1; colIndex < colsCount; colIndex++) {
//
////                System.out.println("Row is "+rowIndex + " Col is "+colIndex  + "Value is "+cellValue);
//                int cellVal = Integer.parseInt(reportTable.getValueAt(rowIndex, colIndex) + "");
//
////                System.out.println("Cell V");
//                if (rowIndex == 3 && colIndex == 3) {
//                    reportTable.getColumnModel().getColumn(colIndex).setCellEditor(new CustomTableCellEditor(1 == 0));
//                    reportTable.getColumnModel().getColumn(colIndex).setCellRenderer(new CustomTableRenderer(1 == 0));
//                } else {
//                    reportTable.getColumnModel().getColumn(colIndex).setCellEditor(new CustomTableCellEditor(0 == 0));
//                    reportTable.getColumnModel().getColumn(colIndex).setCellRenderer(new CustomTableRenderer(0 == 0));
//                }
//                /* if (cellVal == 0) {
//                
//                //                    reportTable.setCellEditor(setTableCustomCellEditor(Color.BLACK, rowIndex, colIndex));
//                String colName = reportTable.getColumnName(colIndex);
//                reportTable.getColumnModel().getColumn(colIndex).setCellRenderer(new CustomTableRenderer(true));
//                //                    reportTable.getColumn(colName).setCellRenderer(new CustomTableRenderer());
//                //                    reportTable.getColumn(colName).setCellEditor(
//                //                            new CustomTableCellEditor(new JCheckBox()));
//                } else {
//                System.out.println("Cell is not zero is " + cellVal);
//                
//                //                    reportTable.setCellEditor(setTableCustomCellEditor(Color.BLUE, rowIndex, colIndex));
//                String colName = reportTable.getColumnName(colIndex);
//                //                    reportTable.getColumn(colName).setCellRenderer(new CustomTableRenderer());
//                reportTable.getColumnModel().getColumn(colIndex).setCellRenderer(new CustomTableRenderer(false));
//                //                    reportTable.getColumn(colName).setCellEditor(new CustomTableCellEditor(new JCheckBox()));
//                
//                }*/
//
//            }
//
//        }
//        DefaultTableCellRenderer cellRenderer = (DefaultTableCellRenderer) reportTable.getCellRenderer(3, 3).getTableCellRendererComponent(reportTable, null, false, false, 3, 3);
//        JTextField cellEditor = (JTextField) reportTable.getCellEditor(3, 3).getTableCellEditorComponent(reportTable, null, false,  3, 3);
//        CellRendererPane cellRenederPane = (CellRendererPane) reportTable.getComponent(0);
//        cellRenederPane.setBackground(Color.red);
//        cellRenederPane.getComponentCount();
//                System.out.println("Count => " + cellRenederPane.getComponent());
//        cellRenderer.setBackground(Color.yellow);
//        cellEditor.setBackground(Color.black);
//        cellRenderer.repaint();
//        reportTable.getColumnModel().getColumn(3).setCellRenderer(new LableCellRenderer());
//        reportTable.getColumnModel().getColumn(3).setCellEditor(new LableCellEditor());
//        DefaultListSelectionModel defaultListSelectionModel = new DefaultListSelectionModel();
//        
////        reportTable.setRowSelectionAllowed(false);
////        reportTable.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
//        for (int rowIndex = 0; rowIndex < rowsCount; rowIndex++) {
//            for (int colIndex = 1; colIndex < colsCount; colIndex++) {
//                int cellVal = Integer.parseInt(reportTable.getValueAt(rowIndex, colIndex) + "");
//                if (cellVal != 0) {
//                    defaultListSelectionModel.addSelectionInterval(0, 0);
//
//                }
//
//            }
//        }
//        reportTable.setSelectionModel(defaultListSelectionModel);

    }//GEN-LAST:event_jButton1ActionPerformed

    public void changeTable(JTable table, int column_index) {
//        int rowsCount = table.getRowCount();

        table.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
        table.getColumnModel().getColumn(column_index).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
//                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                final JLabel cell = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                cell.setHorizontalAlignment(JLabel.CENTER);
                cell.setVerticalAlignment(JLabel.CENTER);

                if (value instanceof String) {
                    cell.setBackground(reportController.getDepartmentBackgroundIndicatorColor(row));

                    cell.setForeground(reportController.getDepartmentForegroundIndicatorColor(row));
                    return cell;
                }
                int cellValue = Integer.parseInt(value + "");

//                if (row == rowsCount - 1) {
////                    c.setBackground(Color.GRAY);
////                    c.setForeground(Color.WHITE);
//                   
//                    return c;
//                }
                if (cellValue != 0) {
                    /*if (row % 2 == 0) {
                    c.setBackground(bacColor);
                    c.setForeground(foreColor);
                    } else {
                    c.setBackground(foreColor);
                    c.setForeground(bacColor);
                    }*/
//                    c.setBackground(bacColor);
//                    c.setForeground(foreColor);

                    cell.setBackground(reportController.getDepartmentBackgroundIndicatorColor(row));
                    cell.setForeground(reportController.getDepartmentForegroundIndicatorColor(row));

                } else {
                    cell.setBackground(null);
                    cell.setForeground(Color.BLACK);

                }
                return cell;
            }
        });
//        table.setSelectionBackground(Color.DARK_GRAY);

    }

    public void colorOneRow(JTable table, int column_index, int rowIndex) {

        table.getColumnModel().getColumn(column_index).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
//                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                final JLabel cell = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                cell.setHorizontalAlignment(JLabel.CENTER);
                cell.setVerticalAlignment(JLabel.CENTER);

                if (row == rowIndex) {
                    if (value instanceof String) {
                        cell.setBackground(Color.BLUE);
                        cell.setForeground(Color.WHITE);
                        return cell;
                    }
                    int cellValue = Integer.parseInt(value + "");

//                if (row == rowsCount - 1) {
////                    c.setBackground(Color.GRAY);
////                    c.setForeground(Color.WHITE);
//                   
//                    return c;
//                }
                    if (cellValue != 0) {

                        cell.setBackground(Color.BLUE);
                        cell.setForeground(Color.WHITE);

                    } else {
                        cell.setBackground(null);
                        cell.setForeground(Color.BLACK);

                    }
                } else {
                    cell.setBackground(null);
                    cell.setForeground(Color.BLACK);
                }

                return cell;
            }
        });
//        table.setSelectionBackground(Color.DARK_GRAY);
//        table.repaint();
    }

    private void itemAboutUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAboutUsActionPerformed
        startNewFrameWithOldFrame(new AboutDeveloperUI());
    }//GEN-LAST:event_itemAboutUsActionPerformed

    private void reportTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportTableMouseEntered

    }//GEN-LAST:event_reportTableMouseEntered

    private void reportTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportTableMouseReleased

        /*int row = reportTable.rowAtPoint(evt.getPoint());
        int col = reportTable.columnAtPoint(evt.getPoint());
        if (row >= 0 && col >= 0) {
        
        Component c = reportTable.getCellRenderer(row, col).getTableCellRendererComponent(reportTable, null, false, true, row, col);
        if (c.getBackground() == Color.RED) {
        c.setBackground(Color.BLUE);
        } else {
        c.setBackground(Color.RED);
        }
        c.repaint();
        
        }*/

    }//GEN-LAST:event_reportTableMouseReleased

    private void itemShowLogDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemShowLogDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemShowLogDataActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed

    }//GEN-LAST:event_jToggleButton1ActionPerformed

    @Override
    public void destroyInstance() {
        instance = null;
        reportController.destroy();
        reportController = null;

        devicesReport = null;
        allModels.clear();
        allDepartments.clear();

        if (scheduler != null) {
            scheduler.shutdown();
            scheduler.shutdownNow();

        }
        System.gc();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DevicesReportUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DevicesReportUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DevicesReportUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DevicesReportUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new DevicesReportUI().setVisible(true);
                DevicesReportUI.getInstance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportReportAsExcel;
    private com.k33ptoo.components.KButton btnFilter;
    private javax.swing.JButton btnPrintTable;
    private javax.swing.JCheckBox checkBoxAllDeps;
    private javax.swing.JCheckBox checkBoxAllModels;
    private javax.swing.JList<String> depsList;
    private javax.swing.JPanel depsPanel;
    private javax.swing.JMenuItem itemAboutUs;
    private javax.swing.JMenuItem itemAddModel;
    private javax.swing.JMenuItem itemAddNewBrand;
    private javax.swing.JMenuItem itemDownloadDevicesData;
    private javax.swing.JMenuItem itemImportDevicesData;
    private javax.swing.JMenuItem itemRefreshFormData;
    private javax.swing.JMenuItem itemShowAllBrands;
    private javax.swing.JMenuItem itemShowLogData;
    private javax.swing.JMenuItem itemShowModels;
    private javax.swing.JMenuItem itemShowTypes;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JLabel lblResponseDepsCount;
    private javax.swing.JLabel lblResponseModelCount;
    private javax.swing.JMenu menuAboutUs;
    private javax.swing.JMenuItem menuItemAddNewDepartment;
    private javax.swing.JMenuItem menuItemAddNewDevice;
    private javax.swing.JMenuItem menuItemShowAllDepartments;
    private javax.swing.JMenuItem menuItemShowAllDevices;
    private javax.swing.JList<String> modelsList;
    private javax.swing.JPanel modelsPanel;
    private base.AdvancedTable reportTable;
    // End of variables declaration//GEN-END:variables

//    private ReportResponse getReport(int[] depsIds, int[] modelsIds) {
//        return DevicesRepository.getInstance().getDevicesReport(depsIds, modelsIds);
//        /*try {
//                    
//                    ReportResponse reportResponse = reportController.handleReportResponse(depsIds, modelsIds);
//                    //            return DevicesRepository.getInstance().getDevicesReport(depsIds, modelsIds);
//                    return reportResponse;
//                    } catch (Exception ex) {
//                    Logger.getLogger(DevicesReportUI.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                    return null;*/
//    }
    private void fillReportTable(ReportResponse devicesReport) {

//        Thread thread = new Thread(() -> {
        DefaultTableModel model = new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{}
        ) {

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }

        };

        if (devicesReport != null) {
            devicesReport.getTableHeader().forEach((col) -> {
//            System.out.println("Col : " + col.getModelName());
                model.addColumn(col.getModelName());

            });

//        System.out.println("Values => " + devicesReport.getTableRows().size());
            devicesReport.getTableRows().forEach((row) -> {
                Object[] os = new Object[row.getModelsValues().length + 1];
                os[0] = row.getDepartmentName();

                for (int i = 0; i < row.getModelsValues().length; i++) {
                    os[i + 1] = row.getModelsValues()[i];
                }

                model.addRow(os);
            });

            reportTable.setModel(model);
//                System.out.println("Now we are in Thread : " + Thread.currentThread().getName());
        }
//            Thread currentThread = Thread.currentThread();
//            if (currentThread.isAlive()) {
//                currentThread.interrupt();
//                currentThread = null;
//            }

        System.out.println("in Thread " + Thread.currentThread().getName());
//        });
//        thread.start();

    }

    private void fillModelsList(ArrayList<Model> models) {

        DefaultListModel<String> model = new DefaultListModel<>();
        models.forEach((col) -> {

            model.addElement(col.getModelName());

        });

        modelsList.setModel(model);
    }

    private void getTableData(int[] depsIds, int[] modelsIds) {

        scheduler.execute(() -> {
            devicesReport = reportController.getReport(depsIds, modelsIds);
            if (devicesReport != null) {
                fillReportTable(devicesReport);
                updateResponseLablesCount();
                System.out.println("in Thread " + Thread.currentThread().getName());
                stopThreadWork();
                CustomProgressDialog.hideProgressDialog();

            }
        });

    }

    private void fetchModels() {
//        ArrayList<Model> models = ModelsRepository.getInstance().getAllModels(false);
        ArrayList<Model> models = ModelsRepository.getInstance().getAllLocalModels("", "");
        if (models != null) {
            allModels.clear();
            allModels.addAll(models);
//            lblResponseModelCount.setText("");
        }

//        fillModelsList(allModels);
    }

    private void fetchDepartments() {
//        ArrayList<Department> deps = DepartmentsRepository.getInstance().getAllDepartments();
        ArrayList<Department> deps = DepartmentsRepository.getInstance().getAllLocalDepartments();
        if (deps != null) {
            allDepartments.clear();
            allDepartments.addAll(deps);
        }

    }

    private void fillDepartmentsListView(ArrayList<Department> deps) {
//        ((DefaultListModel<String>)depsList.getModel()).clear();
        DefaultListModel<String> model = new DefaultListModel<>();
//        String[] listData = new String[deps.size()];
//        for (int i = 0; i < listData.length; i++) {
//            listData[i]= deps.get(i).getDepartmentName();
//            
//        }
        deps.forEach((col) -> {
//            
            model.addElement(col.getDepartmentName());
//
        });
//depsList.remove

        depsList.setModel(model);
    }

    private int[] getSelectedModelsIDs(int[] indices) {
        int[] ids = new int[indices.length];
        for (int i = 0; i < indices.length; i++) {
            int selectedIndex = indices[i];
            Model model = allModels.get(selectedIndex);
            ids[i] = model.getModelId();
            //                System.out.println(" i " + (i+1) + " model "+model.toString());
        }
        return ids;
    }

    private int[] getSelectedDepsIDs(int[] indices) {
        int[] ids = new int[indices.length];
        for (int i = 0; i < indices.length; i++) {
            int selectedIndex = indices[i];
            Department dep = allDepartments.get(selectedIndex);
            ids[i] = dep.getDepartmentId();
            //                System.out.println(" i " + (i+1) + " model "+model.toString());
        }
        return ids;
    }

    private void exportToExcel(ReportResponse response, String fileName) throws Exception {
//    private void exportToExcel() {
//if (true) {
//            throw new Exception("Line sp"+String.valueOf(Character.LINE_SEPARATOR));
//        }
//        Workbook wb = new HSSFWorkbook();
        XSSFWorkbook wb = new XSSFWorkbook();
        CreationHelper createHelper = wb.getCreationHelper();
//        Sheet sheet = wb.createSheet("توزيع الأجهزة");
        XSSFSheet sheet = wb.createSheet("توزيع الأجهزة");

//        Font boldFont = wb.createFont();
        XSSFFont boldFont = wb.createFont();
        boldFont.setBold(true);
        boldFont.setFontHeight(new Short("250"));

//        wb.createCellStyle().setFont();
//        boldFont.setColor((short) Color.GRAY.getRGB());
//        boldFont.setFontHeight(new Short("20"));
// Create a row and put some cells in it. Rows are 0 based.
        XSSFRow excelHeader = sheet.createRow(0);

//        rowStyle.setAlignment(HorizontalAlignment.CENTER);
//        rowStyle.setFont(boldFont);
        // adding header
        ArrayList<Model> tableHeader = response.getTableHeader();
        for (int i = 0; i < tableHeader.size(); i++) {

            XSSFCell cell = excelHeader.createCell(i);
            cell.setCellValue(createHelper.createRichTextString(tableHeader.get(i).getModelName()));

            XSSFCellStyle cellStyle = cell.getCellStyle();
//            CellStyle cellStyle = cell.getCellStyle();
//            cellStyle.setBorderBottom(BorderStyle.DOUBLE);
//            cellStyle.setBorderTop(BorderStyle.HAIR);
//System.out.println("Cell Background = "+cellStyle.getFillBackgroundColorColor().toString());

//            org.apache.poi.hssf.util.HSSFColor col = (org.apache.poi.hssf.util.HSSFColor) cellStyle.getFillBackgroundColorColor();
//            System.out.println("ind 1 =" + col.getIndex() + " ind 2 = " + col.getIndex2() + "hex = " + col.getHexString());
            cellStyle.setAlignment(HorizontalAlignment.CENTER);

            XSSFColor xssfColor = new XSSFColor();
            xssfColor.setARGBHex("FFDDEECC");
            cellStyle.setFillBackgroundColor(xssfColor);

//            boldFont.setFontHeight(100);
            cellStyle.setFont(boldFont);
//            cellStyle.setFillBackgroundColor(Font.COLOR_RED);

            cell.setCellStyle(cellStyle);
//            cell.getCellStyle().setFont(boldFont);

        }

        ArrayList<ReportRow> tableRows = response.getTableRows();
        for (int i = 0; i < tableRows.size(); i++) {

            ReportRow reportRow = tableRows.get(i);
            Row excelRow = sheet.createRow(i + 1);
            excelRow.createCell(0, CellType.STRING).setCellValue(reportRow.getDepartmentName());

            for (int j = 0; j < reportRow.getModelsValues().length; j++) {
                excelRow.createCell(j + 1, CellType.STRING).setCellValue(reportRow.getModelsValues()[j]);
            }

        }

// Create a cell and put a value in it.
//        Cell cell = row.createCell(0);
//        cell.setCellValue(1);
// Or do it on one line.
//        row.createCell(1).setCellValue(1.2);
//        row.createCell(2).setCellValue(
//                createHelper.createRichTextString("This is a string"));
//        row.createCell(3).setCellValue(true);
// Write the output to a file
        FileOutputStream fileOut;
//        try {
//        fileOut = new FileOutputStream("workbook.xls");
        fileOut = new FileOutputStream(fileName);
        wb.write(fileOut);
        fileOut.close();
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(DevicesReportUI.class.getName()).log(Level.SEVERE, null, ex);
//        MessageBox.showErrorMessage(ex.getMessage());
//        } catch (IOException ex) {
//            Logger.getLogger(DevicesReportUI.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }

    private void openExcelFile(String fileName) {
        try {
            Desktop.getDesktop().open(new File(fileName));
        } catch (IOException ex) {
            MessageBox.showErrorMessage(fileName + " غير موجود في الملفات \n" + ex.getMessage());
        }
    }

    private void readTextFile(File selectedFile) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader(selectedFile));
        System.out.println("File is " + readWholeFile(br));

//        readDeps(br);
    }

    private void readDeps(String fileText) throws IOException {

    }

    private String readWholeFile(BufferedReader br) throws IOException {
        StringBuilder file = new StringBuilder();
        String line;
        while ((line = br.readLine()) != null) {

            file.append(line).append("\n");

        }

        return file.toString();
    }

    private boolean isExcelFile(File selectedFile) {
        String path = selectedFile.getAbsolutePath().toLowerCase();
        return path.endsWith(".xls") || path.endsWith(".xlsx");
    }

    private TableCellEditor setTableCustomCellEditor(Color color, int rowIndex, int colIndex) {
        TableCellEditor cellEditor = reportTable.getCellEditor(rowIndex, colIndex);
        cellEditor
                .getTableCellEditorComponent(reportTable, null, false, rowIndex, colIndex)
                .setForeground(color);
        return cellEditor;
    }

    private void checkAndColorTheTable() {
//        reportTable.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);
//        reportTable.setRowSelectionAllowed(true);

        if (jToggleButton1.isSelected()) {

//            int colIndex = reportTable.getSelectedColumn();
            int selectedRow = reportTable.getSelectedRow();
            for (int colIndex = 0; colIndex < reportTable.getColumnCount(); colIndex++) {
                colorOneRow(reportTable, colIndex, selectedRow);
            }

            reportTable.repaint();
        } else {
            reportTable.clearSelection();
        }
    }

    private void updateResponseLablesCount() {
        updateDepartmentLabel();
        updateModelsLabel();

    }

    private void updateDepartmentLabel() {
        int rowsCount = devicesReport.getTableRows().size();
        if (rowsCount > 1) {
            lblResponseDepsCount.setText(rowsCount - 1 + " "); // -1 to skip row of المجموع
        } else {
            lblResponseDepsCount.setText("حدث خطأ");
        }
    }

    private void updateModelsLabel() {
        int rowsCount = devicesReport.getTableHeader().size();
        if (rowsCount > 2) {
            lblResponseModelCount.setText(rowsCount - 2 + " "); // -2 to skip colOf DepartmentName and column of المجموع
        } else {
            lblResponseModelCount.setText("حدث خطأ");
        }
    }

    private void removeResponsesCounts() {
        lblResponseDepsCount.setText("--");
        lblResponseModelCount.setText("--");
    }

    private void stopThreadWork() {
//        if (workThread != null) {
//
////            if (workThread.getThreadGroup() != null && !workThread.getThreadGroup().isDestroyed()) {
////
//////                workThread.getThreadGroup().
////                workThread.getThreadGroup().destroy();
////            }
//            workThreadRunnable = null;
//            if (workThread.isAlive() && !workThread.isInterrupted()) {
////                workThread.setUncaughtExceptionHandler();
//                System.out.println("STATE before inturept=> " + workThread.getState().name());
//                workThread.interrupt();
//                workThread.checkAccess();
//                System.out.println("Work Thread is Alive? " + workThread.isAlive() + " is Interepted => " + workThread.isInterrupted());
//                System.out.println("STATE after inturept=> " + workThread.getState().name());
//                Concurrent
//            }
//
//            workThread = null;
//            System.gc();
//        }

    }

}
